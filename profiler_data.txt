Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 16.91      0.81     0.81  5423328     0.00     0.00  checkMove
 16.49      1.60     0.79  1090078     0.00     0.00  findAllValidMoves
  8.14      1.99     0.39   882776     0.00     0.00  encodeBoard
  7.93      2.37     0.38   929362     0.00     0.00  evaluateMoves
  7.62      2.73     0.36 36735701     0.00     0.00  createNormalMove
  7.52      3.10     0.36   882776     0.00     0.00  getElement
  6.89      3.42     0.33  5347981     0.00     0.00  findMappedIters
  5.01      3.67     0.24  3220845     0.00     0.00  findMappedNoIters
  4.18      3.87     0.20  1090078     0.00     0.00  determineCheckValidations
  3.55      4.04     0.17   464681     0.00     0.00  evaluateMaterial
  2.92      4.17     0.14  8480144     0.00     0.00  checkDirection
  2.71      4.30     0.13  8517907     0.00     0.00  findPawnMoves
  2.71      4.43     0.13   464681     0.00     0.00  insertElement
  1.88      4.53     0.09  4337110     0.00     0.00  revertNormalMove
  1.67      4.61     0.08   160714     0.00     0.00  weakHeuristic
  1.04      4.66     0.05  1090078     0.00     0.00  findCastles
  0.84      4.70     0.04        1     0.04     0.04  destroyNode
  0.63      4.72     0.03  4337110     0.00     0.00  applyNormalMove
  0.42      4.75     0.02    21236     0.00     0.00  createCastleMove
  0.31      4.76     0.01   137464     0.00     0.00  fillDirection
  0.21      4.77     0.01  1043490     0.00     0.00  applyGenericMove
  0.21      4.78     0.01   464681     0.00     0.00  createNode
  0.21      4.79     0.01       41     0.00     0.12  alphaBetaPrune
  0.00      4.79     0.00  1043490     0.00     0.00  revertGenericMove
  0.00      4.79     0.00   464681     0.00     0.00  evaluateBoard
  0.00      4.79     0.00    21449     0.00     0.00  applyCastleMove
  0.00      4.79     0.00    21449     0.00     0.00  revertCastleMove
  0.00      4.79     0.00    17524     0.00     0.00  createPromotionMove
  0.00      4.79     0.00     9727     0.00     0.00  createEnpassMove
  0.00      4.79     0.00      217     0.00     0.00  applyEnpassMove
  0.00      4.79     0.00      217     0.00     0.00  revertEnpassMove
  0.00      4.79     0.00      196     0.00     0.00  convChar
  0.00      4.79     0.00      128     0.00     0.00  applyPromotionMove
  0.00      4.79     0.00      128     0.00     0.00  revertPromotionMove
  0.00      4.79     0.00        2     0.00     0.00  sortMoves
  0.00      4.79     0.00        1     0.00     0.00  createTable
  0.00      4.79     0.00        1     0.00     0.04  destroyTable
  0.00      4.79     0.00        1     0.00     0.04  endAISearch
  0.00      4.79     0.00        1     0.00     4.79  findBestMoveIndex

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.21% of 4.79 seconds

index % time    self  children    called     name
                0.00    4.79       1/1           main [2]
[1]    100.0    0.00    4.79       1         findBestMoveIndex [1]
                0.01    4.74      41/41          alphaBetaPrune [3]
                0.00    0.04       1/1           endAISearch [23]
                0.00    0.00       2/1090078     findAllValidMoves [5]
                0.00    0.00       2/2           sortMoves [39]
                0.00    0.00       1/1           createTable [40]
-----------------------------------------------
                                                 <spontaneous>
[2]    100.0    0.00    4.79                 main [2]
                0.00    4.79       1/1           findBestMoveIndex [1]
                0.00    0.00     196/196         convChar [36]
-----------------------------------------------
                             1043497             alphaBetaPrune [3]
                0.01    4.74      41/41          findBestMoveIndex [1]
[3]     99.2    0.01    4.74      41+1043497 alphaBetaPrune [3]
                0.00    3.26  464681/464681      evaluateBoard [4]
                0.12    0.35  160714/1090078     findAllValidMoves [5]
                0.39    0.00  882776/882776      encodeBoard [13]
                0.36    0.00  882776/882776      getElement [14]
                0.13    0.01  464681/464681      insertElement [18]
                0.08    0.00  160714/160714      weakHeuristic [20]
                0.00    0.02 1043490/1043490     revertGenericMove [26]
                0.01    0.01 1043490/1043490     applyGenericMove [27]
                0.00    0.00       5/5423328     checkMove [8]
                             1043497             alphaBetaPrune [3]
-----------------------------------------------
                0.00    3.26  464681/464681      alphaBetaPrune [3]
[4]     68.1    0.00    3.26  464681         evaluateBoard [4]
                0.38    2.71  929362/929362      evaluateMoves [6]
                0.17    0.00  464681/464681      evaluateMaterial [16]
-----------------------------------------------
                0.00    0.00       2/1090078     findBestMoveIndex [1]
                0.12    0.35  160714/1090078     alphaBetaPrune [3]
                0.67    2.04  929362/1090078     evaluateMoves [6]
[5]     66.4    0.79    2.39 1090078         findAllValidMoves [5]
                0.33    0.37 5347981/5347981     findMappedIters [9]
                0.20    0.32 1090078/1090078     determineCheckValidations [10]
                0.13    0.36 8517907/8517907     findPawnMoves [11]
                0.24    0.22 3220845/3220845     findMappedNoIters [12]
                0.05    0.18 1090078/1090078     findCastles [15]
-----------------------------------------------
                0.38    2.71  929362/929362      evaluateBoard [4]
[6]     64.6    0.38    2.71  929362         evaluateMoves [6]
                0.67    2.04  929362/1090078     findAllValidMoves [5]
-----------------------------------------------
                0.08    0.13 8464695/36735701     findMappedNoIters [12]
                0.14    0.22 13756006/36735701     findPawnMoves [11]
                0.14    0.23 14515000/36735701     findMappedIters [9]
[7]     19.8    0.36    0.58 36735701         createNormalMove [7]
                0.49    0.00 3294031/5423328     checkMove [8]
                0.07    0.00 3294031/4337110     revertNormalMove [19]
                0.02    0.00 3294031/4337110     applyNormalMove [24]
-----------------------------------------------
                0.00    0.00       5/5423328     alphaBetaPrune [3]
                0.00    0.00      19/5423328     createEnpassMove [31]
                0.00    0.00     128/5423328     createPromotionMove [30]
                0.00    0.00   21236/5423328     createCastleMove [25]
                0.15    0.00 1017831/5423328     findCastles [15]
                0.16    0.00 1090078/5423328     determineCheckValidations [10]
                0.49    0.00 3294031/5423328     createNormalMove [7]
[8]     16.9    0.81    0.00 5423328         checkMove [8]
-----------------------------------------------
                0.33    0.37 5347981/5347981     findAllValidMoves [5]
[9]     14.7    0.33    0.37 5347981         findMappedIters [9]
                0.14    0.23 14515000/36735701     createNormalMove [7]
-----------------------------------------------
                0.20    0.32 1090078/1090078     findAllValidMoves [5]
[10]    10.8    0.20    0.32 1090078         determineCheckValidations [10]
                0.16    0.00 1090078/5423328     checkMove [8]
                0.14    0.01 8480144/8480144     checkDirection [17]
-----------------------------------------------
                0.13    0.36 8517907/8517907     findAllValidMoves [5]
[11]    10.1    0.13    0.36 8517907         findPawnMoves [11]
                0.14    0.22 13756006/36735701     createNormalMove [7]
                0.00    0.00   17524/17524       createPromotionMove [30]
                0.00    0.00    9727/9727        createEnpassMove [31]
-----------------------------------------------
                0.24    0.22 3220845/3220845     findAllValidMoves [5]
[12]     9.6    0.24    0.22 3220845         findMappedNoIters [12]
                0.08    0.13 8464695/36735701     createNormalMove [7]
-----------------------------------------------
                0.39    0.00  882776/882776      alphaBetaPrune [3]
[13]     8.1    0.39    0.00  882776         encodeBoard [13]
-----------------------------------------------
                0.36    0.00  882776/882776      alphaBetaPrune [3]
[14]     7.5    0.36    0.00  882776         getElement [14]
-----------------------------------------------
                0.05    0.18 1090078/1090078     findAllValidMoves [5]
[15]     4.7    0.05    0.18 1090078         findCastles [15]
                0.15    0.00 1017831/5423328     checkMove [8]
                0.02    0.00   21236/21236       createCastleMove [25]
-----------------------------------------------
                0.17    0.00  464681/464681      evaluateBoard [4]
[16]     3.5    0.17    0.00  464681         evaluateMaterial [16]
-----------------------------------------------
                0.14    0.01 8480144/8480144     determineCheckValidations [10]
[17]     3.2    0.14    0.01 8480144         checkDirection [17]
                0.01    0.00  137464/137464      fillDirection [28]
-----------------------------------------------
                0.13    0.01  464681/464681      alphaBetaPrune [3]
[18]     2.9    0.13    0.01  464681         insertElement [18]
                0.01    0.00  464681/464681      createNode [29]
-----------------------------------------------
                0.02    0.00 1043079/4337110     revertGenericMove [26]
                0.07    0.00 3294031/4337110     createNormalMove [7]
[19]     1.9    0.09    0.00 4337110         revertNormalMove [19]
-----------------------------------------------
                0.08    0.00  160714/160714      alphaBetaPrune [3]
[20]     1.7    0.08    0.00  160714         weakHeuristic [20]
-----------------------------------------------
                              464680             destroyNode [21]
                0.04    0.00       1/1           destroyTable [22]
[21]     0.8    0.04    0.00       1+464680  destroyNode [21]
                              464680             destroyNode [21]
-----------------------------------------------
                0.00    0.04       1/1           endAISearch [23]
[22]     0.8    0.00    0.04       1         destroyTable [22]
                0.04    0.00       1/1           destroyNode [21]
-----------------------------------------------
                0.00    0.04       1/1           findBestMoveIndex [1]
[23]     0.8    0.00    0.04       1         endAISearch [23]
                0.00    0.04       1/1           destroyTable [22]
-----------------------------------------------
                0.01    0.00 1043079/4337110     applyGenericMove [27]
                0.02    0.00 3294031/4337110     createNormalMove [7]
[24]     0.6    0.03    0.00 4337110         applyNormalMove [24]
-----------------------------------------------
                0.02    0.00   21236/21236       findCastles [15]
[25]     0.5    0.02    0.00   21236         createCastleMove [25]
                0.00    0.00   21236/5423328     checkMove [8]
                0.00    0.00   21236/21449       applyCastleMove [32]
                0.00    0.00   21236/21449       revertCastleMove [33]
-----------------------------------------------
                0.00    0.02 1043490/1043490     alphaBetaPrune [3]
[26]     0.5    0.00    0.02 1043490         revertGenericMove [26]
                0.02    0.00 1043079/4337110     revertNormalMove [19]
                0.00    0.00     213/21449       revertCastleMove [33]
                0.00    0.00     198/217         revertEnpassMove [35]
-----------------------------------------------
                0.01    0.01 1043490/1043490     alphaBetaPrune [3]
[27]     0.4    0.01    0.01 1043490         applyGenericMove [27]
                0.01    0.00 1043079/4337110     applyNormalMove [24]
                0.00    0.00     213/21449       applyCastleMove [32]
                0.00    0.00     198/217         applyEnpassMove [34]
-----------------------------------------------
                0.01    0.00  137464/137464      checkDirection [17]
[28]     0.3    0.01    0.00  137464         fillDirection [28]
-----------------------------------------------
                0.01    0.00  464681/464681      insertElement [18]
[29]     0.2    0.01    0.00  464681         createNode [29]
-----------------------------------------------
                0.00    0.00   17524/17524       findPawnMoves [11]
[30]     0.0    0.00    0.00   17524         createPromotionMove [30]
                0.00    0.00     128/5423328     checkMove [8]
                0.00    0.00     128/128         applyPromotionMove [37]
                0.00    0.00     128/128         revertPromotionMove [38]
-----------------------------------------------
                0.00    0.00    9727/9727        findPawnMoves [11]
[31]     0.0    0.00    0.00    9727         createEnpassMove [31]
                0.00    0.00      19/5423328     checkMove [8]
                0.00    0.00      19/217         applyEnpassMove [34]
                0.00    0.00      19/217         revertEnpassMove [35]
-----------------------------------------------
                0.00    0.00     213/21449       applyGenericMove [27]
                0.00    0.00   21236/21449       createCastleMove [25]
[32]     0.0    0.00    0.00   21449         applyCastleMove [32]
-----------------------------------------------
                0.00    0.00     213/21449       revertGenericMove [26]
                0.00    0.00   21236/21449       createCastleMove [25]
[33]     0.0    0.00    0.00   21449         revertCastleMove [33]
-----------------------------------------------
                0.00    0.00      19/217         createEnpassMove [31]
                0.00    0.00     198/217         applyGenericMove [27]
[34]     0.0    0.00    0.00     217         applyEnpassMove [34]
-----------------------------------------------
                0.00    0.00      19/217         createEnpassMove [31]
                0.00    0.00     198/217         revertGenericMove [26]
[35]     0.0    0.00    0.00     217         revertEnpassMove [35]
-----------------------------------------------
                0.00    0.00     196/196         main [2]
[36]     0.0    0.00    0.00     196         convChar [36]
-----------------------------------------------
                0.00    0.00     128/128         createPromotionMove [30]
[37]     0.0    0.00    0.00     128         applyPromotionMove [37]
-----------------------------------------------
                0.00    0.00     128/128         createPromotionMove [30]
[38]     0.0    0.00    0.00     128         revertPromotionMove [38]
-----------------------------------------------
                0.00    0.00       2/2           findBestMoveIndex [1]
[39]     0.0    0.00    0.00       2         sortMoves [39]
-----------------------------------------------
                0.00    0.00       1/1           findBestMoveIndex [1]
[40]     0.0    0.00    0.00       1         createTable [40]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [3] alphaBetaPrune         [30] createPromotionMove    [15] findCastles
  [32] applyCastleMove        [40] createTable             [9] findMappedIters
  [34] applyEnpassMove        [21] destroyNode            [12] findMappedNoIters
  [27] applyGenericMove       [22] destroyTable           [11] findPawnMoves
  [24] applyNormalMove        [10] determineCheckValidations [14] getElement
  [37] applyPromotionMove     [13] encodeBoard            [18] insertElement
  [17] checkDirection         [23] endAISearch            [33] revertCastleMove
   [8] checkMove               [4] evaluateBoard          [35] revertEnpassMove
  [36] convChar               [16] evaluateMaterial       [26] revertGenericMove
  [25] createCastleMove        [6] evaluateMoves          [19] revertNormalMove
  [31] createEnpassMove       [28] fillDirection          [38] revertPromotionMove
  [29] createNode              [5] findAllValidMoves      [39] sortMoves
   [7] createNormalMove        [1] findBestMoveIndex      [20] weakHeuristic
