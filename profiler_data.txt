Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 20.75      0.77     0.77  1487452     0.00     0.00  findAllValidMoves
 15.50      1.34     0.57  7346147     0.00     0.00  checkMove
  9.57      1.70     0.35  1215435     0.00     0.00  encodeBoard
  7.82      1.99     0.29 48901747     0.00     0.00  createNormalMove
  7.28      2.26     0.27  7278010     0.00     0.00  findMappedIters
  7.14      2.52     0.27  1215435     0.00     0.00  getElement
  5.12      2.71     0.19  1278972     0.00     0.00  evaluateMoves
  4.31      2.88     0.16  4396549     0.00     0.00  findMappedNoIters
  3.37      3.00     0.12  1487452     0.00     0.00  determineCheckValidations
  3.23      3.12     0.12 11444673     0.00     0.00  findPawnMoves
  3.23      3.24     0.12   639486     0.00     0.00  insertElement
  2.16      3.32     0.08   639486     0.00     0.00  evaluateMaterial
  1.89      3.39     0.07   639486     0.00     0.00  evaluatePosition
  1.62      3.45     0.06  5815661     0.00     0.00  revertNormalMove
  1.48      3.50     0.06 11547856     0.00     0.00  checkDirection
  1.35      3.56     0.05   208478     0.00     0.00  weakHeuristic
  1.08      3.60     0.04  5815661     0.00     0.00  applyNormalMove
  0.81      3.62     0.03  1487452     0.00     0.00  findCastles
  0.81      3.65     0.03        1     0.03     0.03  destroyNode
  0.40      3.67     0.01  1423913     0.00     0.00  revertGenericMove
  0.40      3.69     0.01   209352     0.00     0.00  fillDirection
  0.27      3.69     0.01   639486     0.00     0.00  evaluateBoard
  0.27      3.71     0.01    26384     0.00     0.00  createCastleMove
  0.13      3.71     0.01  1423913     0.00     0.00  applyGenericMove
  0.00      3.71     0.00   639486     0.00     0.00  createNode
  0.00      3.71     0.00   120096     0.00     0.00  createPromotionMove
  0.00      3.71     0.00    39312     0.00     0.00  applyPromotionMove
  0.00      3.71     0.00    39312     0.00     0.00  revertPromotionMove
  0.00      3.71     0.00    26638     0.00     0.00  applyCastleMove
  0.00      3.71     0.00    26638     0.00     0.00  revertCastleMove
  0.00      3.71     0.00    13568     0.00     0.00  createEnpassMove
  0.00      3.71     0.00      301     0.00     0.00  applyEnpassMove
  0.00      3.71     0.00      301     0.00     0.00  revertEnpassMove
  0.00      3.71     0.00      196     0.00     0.00  convChar
  0.00      3.71     0.00       55     0.00     0.07  alphaBetaPrune
  0.00      3.71     0.00        2     0.00     0.00  sortMoves
  0.00      3.71     0.00        1     0.00     0.00  createTable
  0.00      3.71     0.00        1     0.00     0.03  destroyTable
  0.00      3.71     0.00        1     0.00     0.03  endAISearch
  0.00      3.71     0.00        1     0.00     3.71  findBestMoveIndex

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.27% of 3.71 seconds

index % time    self  children    called     name
                0.00    3.71       1/1           main [2]
[1]    100.0    0.00    3.71       1         findBestMoveIndex [1]
                0.00    3.68      55/55          alphaBetaPrune [3]
                0.00    0.03       1/1           endAISearch [25]
                0.00    0.00       2/1487452     findAllValidMoves [5]
                0.00    0.00       2/2           sortMoves [41]
                0.00    0.00       1/1           createTable [42]
-----------------------------------------------
                                                 <spontaneous>
[2]    100.0    0.00    3.71                 main [2]
                0.00    3.71       1/1           findBestMoveIndex [1]
                0.00    0.00     196/196         convChar [40]
-----------------------------------------------
                             1423937             alphaBetaPrune [3]
                0.00    3.68      55/55          findBestMoveIndex [1]
[3]     99.2    0.00    3.68      55+1423937 alphaBetaPrune [3]
                0.01    2.49  639486/639486      evaluateBoard [4]
                0.35    0.00 1215435/1215435     encodeBoard [11]
                0.11    0.24  208478/1487452     findAllValidMoves [5]
                0.27    0.00 1215435/1215435     getElement [14]
                0.12    0.00  639486/639486      insertElement [16]
                0.05    0.00  208478/208478      weakHeuristic [21]
                0.01    0.01 1423913/1423913     revertGenericMove [26]
                0.01    0.01 1423913/1423913     applyGenericMove [28]
                0.00    0.00       8/7346147     checkMove [8]
                             1423937             alphaBetaPrune [3]
-----------------------------------------------
                0.01    2.49  639486/639486      alphaBetaPrune [3]
[4]     67.3    0.01    2.49  639486         evaluateBoard [4]
                0.19    2.15 1278972/1278972     evaluateMoves [6]
                0.08    0.00  639486/639486      evaluateMaterial [17]
                0.07    0.00  639486/639486      evaluatePosition [19]
-----------------------------------------------
                0.00    0.00       2/1487452     findBestMoveIndex [1]
                0.11    0.24  208478/1487452     alphaBetaPrune [3]
                0.66    1.48 1278972/1487452     evaluateMoves [6]
[5]     67.3    0.77    1.73 1487452         findAllValidMoves [5]
                0.27    0.28 7278010/7278010     findMappedIters [9]
                0.12    0.27 11444673/11444673     findPawnMoves [10]
                0.16    0.16 4396549/4396549     findMappedNoIters [12]
                0.12    0.19 1487452/1487452     determineCheckValidations [13]
                0.03    0.12 1487452/1487452     findCastles [15]
-----------------------------------------------
                0.19    2.15 1278972/1278972     evaluateBoard [4]
[6]     63.0    0.19    2.15 1278972         evaluateMoves [6]
                0.66    1.48 1278972/1487452     findAllValidMoves [5]
-----------------------------------------------
                0.07    0.10 11180668/48901747     findMappedNoIters [12]
                0.11    0.16 18707574/48901747     findPawnMoves [10]
                0.11    0.16 19013505/48901747     findMappedIters [9]
[7]     19.1    0.29    0.42 48901747         createNormalMove [7]
                0.34    0.00 4392274/7346147     checkMove [8]
                0.05    0.00 4392274/5815661     revertNormalMove [20]
                0.03    0.00 4392274/5815661     applyNormalMove [22]
-----------------------------------------------
                0.00    0.00       8/7346147     alphaBetaPrune [3]
                0.00    0.00      29/7346147     createEnpassMove [31]
                0.00    0.00   26384/7346147     createCastleMove [29]
                0.00    0.00   39312/7346147     createPromotionMove [30]
                0.11    0.00 1400688/7346147     findCastles [15]
                0.12    0.00 1487452/7346147     determineCheckValidations [13]
                0.34    0.00 4392274/7346147     createNormalMove [7]
[8]     15.5    0.57    0.00 7346147         checkMove [8]
-----------------------------------------------
                0.27    0.28 7278010/7278010     findAllValidMoves [5]
[9]     14.7    0.27    0.28 7278010         findMappedIters [9]
                0.11    0.16 19013505/48901747     createNormalMove [7]
-----------------------------------------------
                0.12    0.27 11444673/11444673     findAllValidMoves [5]
[10]    10.6    0.12    0.27 11444673         findPawnMoves [10]
                0.11    0.16 18707574/48901747     createNormalMove [7]
                0.00    0.00  120096/120096      createPromotionMove [30]
                0.00    0.00   13568/13568       createEnpassMove [31]
-----------------------------------------------
                0.35    0.00 1215435/1215435     alphaBetaPrune [3]
[11]     9.6    0.35    0.00 1215435         encodeBoard [11]
-----------------------------------------------
                0.16    0.16 4396549/4396549     findAllValidMoves [5]
[12]     8.7    0.16    0.16 4396549         findMappedNoIters [12]
                0.07    0.10 11180668/48901747     createNormalMove [7]
-----------------------------------------------
                0.12    0.19 1487452/1487452     findAllValidMoves [5]
[13]     8.4    0.12    0.19 1487452         determineCheckValidations [13]
                0.12    0.00 1487452/7346147     checkMove [8]
                0.06    0.01 11547856/11547856     checkDirection [18]
-----------------------------------------------
                0.27    0.00 1215435/1215435     alphaBetaPrune [3]
[14]     7.1    0.27    0.00 1215435         getElement [14]
-----------------------------------------------
                0.03    0.12 1487452/1487452     findAllValidMoves [5]
[15]     4.1    0.03    0.12 1487452         findCastles [15]
                0.11    0.00 1400688/7346147     checkMove [8]
                0.01    0.00   26384/26384       createCastleMove [29]
-----------------------------------------------
                0.12    0.00  639486/639486      alphaBetaPrune [3]
[16]     3.2    0.12    0.00  639486         insertElement [16]
                0.00    0.00  639486/639486      createNode [33]
-----------------------------------------------
                0.08    0.00  639486/639486      evaluateBoard [4]
[17]     2.2    0.08    0.00  639486         evaluateMaterial [17]
-----------------------------------------------
                0.06    0.01 11547856/11547856     determineCheckValidations [13]
[18]     1.9    0.06    0.01 11547856         checkDirection [18]
                0.01    0.00  209352/209352      fillDirection [27]
-----------------------------------------------
                0.07    0.00  639486/639486      evaluateBoard [4]
[19]     1.9    0.07    0.00  639486         evaluatePosition [19]
-----------------------------------------------
                0.01    0.00 1423387/5815661     revertGenericMove [26]
                0.05    0.00 4392274/5815661     createNormalMove [7]
[20]     1.6    0.06    0.00 5815661         revertNormalMove [20]
-----------------------------------------------
                0.05    0.00  208478/208478      alphaBetaPrune [3]
[21]     1.3    0.05    0.00  208478         weakHeuristic [21]
-----------------------------------------------
                0.01    0.00 1423387/5815661     applyGenericMove [28]
                0.03    0.00 4392274/5815661     createNormalMove [7]
[22]     1.1    0.04    0.00 5815661         applyNormalMove [22]
-----------------------------------------------
                              639485             destroyNode [23]
                0.03    0.00       1/1           destroyTable [24]
[23]     0.8    0.03    0.00       1+639485  destroyNode [23]
                              639485             destroyNode [23]
-----------------------------------------------
                0.00    0.03       1/1           endAISearch [25]
[24]     0.8    0.00    0.03       1         destroyTable [24]
                0.03    0.00       1/1           destroyNode [23]
-----------------------------------------------
                0.00    0.03       1/1           findBestMoveIndex [1]
[25]     0.8    0.00    0.03       1         endAISearch [25]
                0.00    0.03       1/1           destroyTable [24]
-----------------------------------------------
                0.01    0.01 1423913/1423913     alphaBetaPrune [3]
[26]     0.8    0.01    0.01 1423913         revertGenericMove [26]
                0.01    0.00 1423387/5815661     revertNormalMove [20]
                0.00    0.00     272/301         revertEnpassMove [39]
                0.00    0.00     254/26638       revertCastleMove [37]
-----------------------------------------------
                0.01    0.00  209352/209352      checkDirection [18]
[27]     0.4    0.01    0.00  209352         fillDirection [27]
-----------------------------------------------
                0.01    0.01 1423913/1423913     alphaBetaPrune [3]
[28]     0.4    0.01    0.01 1423913         applyGenericMove [28]
                0.01    0.00 1423387/5815661     applyNormalMove [22]
                0.00    0.00     272/301         applyEnpassMove [38]
                0.00    0.00     254/26638       applyCastleMove [36]
-----------------------------------------------
                0.01    0.00   26384/26384       findCastles [15]
[29]     0.3    0.01    0.00   26384         createCastleMove [29]
                0.00    0.00   26384/7346147     checkMove [8]
                0.00    0.00   26384/26638       applyCastleMove [36]
                0.00    0.00   26384/26638       revertCastleMove [37]
-----------------------------------------------
                0.00    0.00  120096/120096      findPawnMoves [10]
[30]     0.1    0.00    0.00  120096         createPromotionMove [30]
                0.00    0.00   39312/7346147     checkMove [8]
                0.00    0.00   39312/39312       applyPromotionMove [34]
                0.00    0.00   39312/39312       revertPromotionMove [35]
-----------------------------------------------
                0.00    0.00   13568/13568       findPawnMoves [10]
[31]     0.0    0.00    0.00   13568         createEnpassMove [31]
                0.00    0.00      29/7346147     checkMove [8]
                0.00    0.00      29/301         applyEnpassMove [38]
                0.00    0.00      29/301         revertEnpassMove [39]
-----------------------------------------------
                0.00    0.00  639486/639486      insertElement [16]
[33]     0.0    0.00    0.00  639486         createNode [33]
-----------------------------------------------
                0.00    0.00   39312/39312       createPromotionMove [30]
[34]     0.0    0.00    0.00   39312         applyPromotionMove [34]
-----------------------------------------------
                0.00    0.00   39312/39312       createPromotionMove [30]
[35]     0.0    0.00    0.00   39312         revertPromotionMove [35]
-----------------------------------------------
                0.00    0.00     254/26638       applyGenericMove [28]
                0.00    0.00   26384/26638       createCastleMove [29]
[36]     0.0    0.00    0.00   26638         applyCastleMove [36]
-----------------------------------------------
                0.00    0.00     254/26638       revertGenericMove [26]
                0.00    0.00   26384/26638       createCastleMove [29]
[37]     0.0    0.00    0.00   26638         revertCastleMove [37]
-----------------------------------------------
                0.00    0.00      29/301         createEnpassMove [31]
                0.00    0.00     272/301         applyGenericMove [28]
[38]     0.0    0.00    0.00     301         applyEnpassMove [38]
-----------------------------------------------
                0.00    0.00      29/301         createEnpassMove [31]
                0.00    0.00     272/301         revertGenericMove [26]
[39]     0.0    0.00    0.00     301         revertEnpassMove [39]
-----------------------------------------------
                0.00    0.00     196/196         main [2]
[40]     0.0    0.00    0.00     196         convChar [40]
-----------------------------------------------
                0.00    0.00       2/2           findBestMoveIndex [1]
[41]     0.0    0.00    0.00       2         sortMoves [41]
-----------------------------------------------
                0.00    0.00       1/1           findBestMoveIndex [1]
[42]     0.0    0.00    0.00       1         createTable [42]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [3] alphaBetaPrune         [42] createTable             [9] findMappedIters
  [36] applyCastleMove        [23] destroyNode            [12] findMappedNoIters
  [38] applyEnpassMove        [24] destroyTable           [10] findPawnMoves
  [28] applyGenericMove       [13] determineCheckValidations [14] getElement
  [22] applyNormalMove        [11] encodeBoard            [16] insertElement
  [34] applyPromotionMove     [25] endAISearch            [37] revertCastleMove
  [18] checkDirection          [4] evaluateBoard          [39] revertEnpassMove
   [8] checkMove              [17] evaluateMaterial       [26] revertGenericMove
  [40] convChar                [6] evaluateMoves          [20] revertNormalMove
  [29] createCastleMove       [19] evaluatePosition       [35] revertPromotionMove
  [31] createEnpassMove       [27] fillDirection          [41] sortMoves
  [33] createNode              [5] findAllValidMoves      [21] weakHeuristic
   [7] createNormalMove        [1] findBestMoveIndex
  [30] createPromotionMove    [15] findCastles
