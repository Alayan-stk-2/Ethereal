2620321

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 17.70      4.83     4.83 20145463     0.00     0.00  validateMove
 12.86      8.33     3.50  5019537     0.00     0.00  evaluateMoves
  9.94     11.04     2.71  5175981     0.00     0.00  getAllMoves
  7.37     13.05     2.01  2746022     0.00     0.00  createKey
  5.70     14.61     1.55  2698495     0.00     0.00  getNode
  4.95     15.96     1.35 15030972     0.00     0.00  getBishopMoves
  4.68     17.23     1.27 40127501     0.00     0.00  getPawnMoves
  4.49     18.45     1.23  2542099     0.00     0.00  evaluateMaterial
  4.20     19.60     1.15 15219548     0.00     0.00  getRookMoves
  4.16     20.73     1.14  5463967     0.00     0.00  pruneCheckValidations
  3.83     21.78     1.04   233890     0.00     0.00  valueSort
  3.82     22.82     1.04 10359474     0.00     0.00  evaluatePosition
  3.08     23.66     0.84 156358055     0.00     0.00  createNormalMove
  2.90     24.45     0.79  4867824     0.00     0.00  getKingMoves
  2.88     25.23     0.79  9959775     0.00     0.00  getKnightMoves
  2.02     25.79     0.55 20328896     0.00     0.00  revertNormalMove
  1.61     26.23     0.44 19377177     0.00     0.00  applyNormalMove
  1.32     26.59     0.36  2973035     0.00     0.00  createHash
  0.77     26.80     0.21     3294     0.06     8.25  alphaBetaPrune
  0.42     26.91     0.12   247865     0.00     0.01  hueristicSort
  0.35     27.00     0.10  1749610     0.00     0.00  storeNode
  0.22     27.07     0.06   281437     0.00     0.00  fillDirection
  0.17     27.11     0.04  2592186     0.00     0.01  evaluateBoard
  0.15     27.15     0.04  2097152     0.00     0.00  createBucket
  0.09     27.18     0.03  4938190     0.00     0.00  getQueenMoves
  0.07     27.20     0.02        1    20.00    20.00  getNonEmptyBucketCount
  0.07     27.21     0.02                             createCastleMove
  0.06     27.23     0.01  1802854     0.00     0.00  createNode
  0.04     27.24     0.01     3695     0.00     0.00  createEnpassMove
  0.04     27.25     0.01      517     0.02     0.02  applyEnpassMove
  0.04     27.26     0.01                             applyCastleMove
  0.00     27.26     0.00  1913085     0.00     0.00  getNodeType
  0.00     27.26     0.00     1092     0.00     0.00  copyBoard
  0.00     27.26     0.00      532     0.00     0.00  revertEnpassMove
  0.00     27.26     0.00      331     0.00     0.00  createPromotionMove
  0.00     27.26     0.00        8     0.00     0.00  revertPromotionMove
  0.00     27.26     0.00        7     0.00     0.00  applyPromotionMove
  0.00     27.26     0.00        1     0.00     0.00  buildKnightMap
  0.00     27.26     0.00        1     0.00     0.00  createBoard
  0.00     27.26     0.00        1     0.00    40.00  createTTable
  0.00     27.26     0.00        1     0.00    20.00  endSearch
  0.00     27.26     0.00        1     0.00   563.17  getBestMoveIndex

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.04% of 27.26 seconds

index % time    self  children    called     name
                             2799367             alphaBetaPrune [1]
                0.00    0.50      61/3294        getBestMoveIndex [21]
                0.21   26.46    3233/3294        spawnAlphaBetaPruneThread [2]
[1]     99.7    0.21   26.96    3294+2799367 alphaBetaPrune [1]
                0.04   19.65 2592186/2592186     evaluateBoard [3]
                0.12    2.21  247865/247865      hueristicSort [10]
                2.01    0.00 2746022/2746022     createKey [13]
                1.55    0.00 2698495/2698495     getNode [15]
                0.13    0.63  257072/5175981     getAllMoves [5]
                0.36    0.00 2973035/2973035     createHash [25]
                0.10    0.00 1749610/1749610     storeNode [26]
                0.08    0.00 2977950/20328896     revertNormalMove [23]
                0.06    0.00 2792782/19377177     applyNormalMove [24]
                0.01    0.00 1802854/1802854     createNode [33]
                0.00    0.00     120/517         applyEnpassMove [35]
                0.00    0.00       5/20145463     validateMove [6]
                0.00    0.00 1913085/1913085     getNodeType [38]
                0.00    0.00    1092/1092        copyBoard [39]
                0.00    0.00     128/532         revertEnpassMove [40]
                             2799367             alphaBetaPrune [1]
-----------------------------------------------
                                                 <spontaneous>
[2]     97.8    0.00   26.67                 spawnAlphaBetaPruneThread [2]
                0.21   26.46    3233/3294        alphaBetaPrune [1]
-----------------------------------------------
                0.04   19.65 2592186/2592186     alphaBetaPrune [1]
[3]     72.2    0.04   19.65 2592186         evaluateBoard [3]
                3.50   14.65 5019537/5019537     evaluateMoves [4]
                1.23    0.00 2542099/2542099     evaluateMaterial [18]
                0.26    0.00 2597015/10359474     evaluatePosition [20]
-----------------------------------------------
                3.50   14.65 5019537/5019537     evaluateBoard [3]
[4]     66.6    3.50   14.65 5019537         evaluateMoves [4]
                2.58   12.08 4918907/5175981     getAllMoves [5]
-----------------------------------------------
                0.00    0.00       2/5175981     getBestMoveIndex [21]
                0.13    0.63  257072/5175981     alphaBetaPrune [1]
                2.58   12.08 4918907/5175981     evaluateMoves [4]
[5]     56.6    2.71   12.71 5175981         getAllMoves [5]
                1.27    1.44 40127501/40127501     getPawnMoves [8]
                1.14    1.38 5463967/5463967     pruneCheckValidations [9]
                0.79    1.36 4867824/4867824     getKingMoves [12]
                0.79    0.81 9959775/9959775     getKnightMoves [14]
                0.91    0.56 10094637/15030972     getBishopMoves [11]
                0.03    1.22 4938190/4938190     getQueenMoves [17]
                0.77    0.26 10210904/15219548     getRookMoves [16]
-----------------------------------------------
                0.00    0.00       5/20145463     alphaBetaPrune [1]
                0.00    0.00       6/20145463     createPromotionMove [37]
                1.21    0.00 5045194/20145463     getKingMoves [12]
                1.32    0.00 5526637/20145463     pruneCheckValidations [9]
                2.29    0.00 9573621/20145463     createNormalMove [7]
[6]     17.7    4.82    0.00 20145463         validateMove [6]
-----------------------------------------------
                0.03    0.12 6507568/156358055     getKingMoves [12]
                0.09    0.29 16511144/156358055     getRookMoves [16]
                0.19    0.62 35196292/156358055     getKnightMoves [14]
                0.19    0.64 36287745/156358055     getBishopMoves [11]
                0.33    1.09 61855306/156358055     getPawnMoves [8]
[7]     13.2    0.84    2.76 156358055         createNormalMove [7]
                2.29    0.00 9573621/20145463     validateMove [6]
                0.26    0.00 9674383/20328896     revertNormalMove [23]
                0.21    0.00 9205789/19377177     applyNormalMove [24]
-----------------------------------------------
                1.27    1.44 40127501/40127501     getAllMoves [5]
[8]      9.9    1.27    1.44 40127501         getPawnMoves [8]
                0.33    1.09 61855306/156358055     createNormalMove [7]
                0.01    0.00    3695/3695        createEnpassMove [34]
                0.00    0.00     331/331         createPromotionMove [37]
-----------------------------------------------
                1.14    1.38 5463967/5463967     getAllMoves [5]
[9]      9.2    1.14    1.38 5463967         pruneCheckValidations [9]
                1.32    0.00 5526637/20145463     validateMove [6]
                0.06    0.00  281437/281437      fillDirection [27]
-----------------------------------------------
                0.12    2.21  247865/247865      alphaBetaPrune [1]
[10]     8.5    0.12    2.21  247865         hueristicSort [10]
                1.04    0.00  233887/233890      valueSort [19]
                0.78    0.00 7762459/10359474     evaluatePosition [20]
                0.21    0.00 7676563/20328896     revertNormalMove [23]
                0.17    0.00 7378606/19377177     applyNormalMove [24]
                0.01    0.00     397/517         applyEnpassMove [35]
                0.00    0.00     403/532         revertEnpassMove [40]
-----------------------------------------------
                0.44    0.27 4936335/15030972     getQueenMoves [17]
                0.91    0.56 10094637/15030972     getAllMoves [5]
[11]     8.0    1.35    0.84 15030972         getBishopMoves [11]
                0.19    0.64 36287745/156358055     createNormalMove [7]
-----------------------------------------------
                0.79    1.36 4867824/4867824     getAllMoves [5]
[12]     7.9    0.79    1.36 4867824         getKingMoves [12]
                1.21    0.00 5045194/20145463     validateMove [6]
                0.03    0.12 6507568/156358055     createNormalMove [7]
-----------------------------------------------
                2.01    0.00 2746022/2746022     alphaBetaPrune [1]
[13]     7.4    2.01    0.00 2746022         createKey [13]
-----------------------------------------------
                0.79    0.81 9959775/9959775     getAllMoves [5]
[14]     5.9    0.79    0.81 9959775         getKnightMoves [14]
                0.19    0.62 35196292/156358055     createNormalMove [7]
-----------------------------------------------
                1.55    0.00 2698495/2698495     alphaBetaPrune [1]
[15]     5.7    1.55    0.00 2698495         getNode [15]
-----------------------------------------------
                0.38    0.13 5008644/15219548     getQueenMoves [17]
                0.77    0.26 10210904/15219548     getAllMoves [5]
[16]     5.6    1.15    0.38 15219548         getRookMoves [16]
                0.09    0.29 16511144/156358055     createNormalMove [7]
-----------------------------------------------
                0.03    1.22 4938190/4938190     getAllMoves [5]
[17]     4.6    0.03    1.22 4938190         getQueenMoves [17]
                0.44    0.27 4936335/15030972     getBishopMoves [11]
                0.38    0.13 5008644/15219548     getRookMoves [16]
-----------------------------------------------
                1.23    0.00 2542099/2542099     evaluateBoard [3]
[18]     4.5    1.23    0.00 2542099         evaluateMaterial [18]
-----------------------------------------------
                0.00    0.00       3/233890      getBestMoveIndex [21]
                1.04    0.00  233887/233890      hueristicSort [10]
[19]     3.8    1.04    0.00  233890         valueSort [19]
-----------------------------------------------
                0.26    0.00 2597015/10359474     evaluateBoard [3]
                0.78    0.00 7762459/10359474     hueristicSort [10]
[20]     3.8    1.04    0.00 10359474         evaluatePosition [20]
-----------------------------------------------
                0.00    0.56       1/1           main [22]
[21]     2.1    0.00    0.56       1         getBestMoveIndex [21]
                0.00    0.50      61/3294        alphaBetaPrune [1]
                0.00    0.04       1/1           createTTable [29]
                0.00    0.02       1/1           endSearch [30]
                0.00    0.00       3/233890      valueSort [19]
                0.00    0.00       2/5175981     getAllMoves [5]
-----------------------------------------------
                                                 <spontaneous>
[22]     2.1    0.00    0.56                 main [22]
                0.00    0.56       1/1           getBestMoveIndex [21]
                0.00    0.00       1/1           createBoard [44]
-----------------------------------------------
                0.08    0.00 2977950/20328896     alphaBetaPrune [1]
                0.21    0.00 7676563/20328896     hueristicSort [10]
                0.26    0.00 9674383/20328896     createNormalMove [7]
[23]     2.0    0.55    0.00 20328896         revertNormalMove [23]
-----------------------------------------------
                0.06    0.00 2792782/19377177     alphaBetaPrune [1]
                0.17    0.00 7378606/19377177     hueristicSort [10]
                0.21    0.00 9205789/19377177     createNormalMove [7]
[24]     1.6    0.44    0.00 19377177         applyNormalMove [24]
-----------------------------------------------
                0.36    0.00 2973035/2973035     alphaBetaPrune [1]
[25]     1.3    0.36    0.00 2973035         createHash [25]
-----------------------------------------------
                0.10    0.00 1749610/1749610     alphaBetaPrune [1]
[26]     0.3    0.10    0.00 1749610         storeNode [26]
-----------------------------------------------
                0.06    0.00  281437/281437      pruneCheckValidations [9]
[27]     0.2    0.06    0.00  281437         fillDirection [27]
-----------------------------------------------
                0.04    0.00 2097152/2097152     createTTable [29]
[28]     0.1    0.04    0.00 2097152         createBucket [28]
-----------------------------------------------
                0.00    0.04       1/1           getBestMoveIndex [21]
[29]     0.1    0.00    0.04       1         createTTable [29]
                0.04    0.00 2097152/2097152     createBucket [28]
-----------------------------------------------
                0.00    0.02       1/1           getBestMoveIndex [21]
[30]     0.1    0.00    0.02       1         endSearch [30]
                0.02    0.00       1/1           getNonEmptyBucketCount [31]
-----------------------------------------------
                0.02    0.00       1/1           endSearch [30]
[31]     0.1    0.02    0.00       1         getNonEmptyBucketCount [31]
-----------------------------------------------
                                                 <spontaneous>
[32]     0.1    0.02    0.00                 createCastleMove [32]
-----------------------------------------------
                0.01    0.00 1802854/1802854     alphaBetaPrune [1]
[33]     0.1    0.01    0.00 1802854         createNode [33]
-----------------------------------------------
                0.01    0.00    3695/3695        getPawnMoves [8]
[34]     0.0    0.01    0.00    3695         createEnpassMove [34]
                0.00    0.00       1/532         revertEnpassMove [40]
-----------------------------------------------
                0.00    0.00     120/517         alphaBetaPrune [1]
                0.01    0.00     397/517         hueristicSort [10]
[35]     0.0    0.01    0.00     517         applyEnpassMove [35]
-----------------------------------------------
                                                 <spontaneous>
[36]     0.0    0.01    0.00                 applyCastleMove [36]
-----------------------------------------------
                0.00    0.00     331/331         getPawnMoves [8]
[37]     0.0    0.00    0.00     331         createPromotionMove [37]
                0.00    0.00       6/20145463     validateMove [6]
                0.00    0.00       8/8           revertPromotionMove [41]
                0.00    0.00       7/7           applyPromotionMove [42]
-----------------------------------------------
                0.00    0.00 1913085/1913085     alphaBetaPrune [1]
[38]     0.0    0.00    0.00 1913085         getNodeType [38]
-----------------------------------------------
                0.00    0.00    1092/1092        alphaBetaPrune [1]
[39]     0.0    0.00    0.00    1092         copyBoard [39]
-----------------------------------------------
                0.00    0.00       1/532         createEnpassMove [34]
                0.00    0.00     128/532         alphaBetaPrune [1]
                0.00    0.00     403/532         hueristicSort [10]
[40]     0.0    0.00    0.00     532         revertEnpassMove [40]
-----------------------------------------------
                0.00    0.00       8/8           createPromotionMove [37]
[41]     0.0    0.00    0.00       8         revertPromotionMove [41]
-----------------------------------------------
                0.00    0.00       7/7           createPromotionMove [37]
[42]     0.0    0.00    0.00       7         applyPromotionMove [42]
-----------------------------------------------
                0.00    0.00       1/1           createBoard [44]
[43]     0.0    0.00    0.00       1         buildKnightMap [43]
-----------------------------------------------
                0.00    0.00       1/1           main [22]
[44]     0.0    0.00    0.00       1         createBoard [44]
                0.00    0.00       1/1           buildKnightMap [43]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [1] alphaBetaPrune          [7] createNormalMove       [15] getNode
  [36] applyCastleMove        [37] createPromotionMove    [38] getNodeType
  [35] applyEnpassMove        [29] createTTable           [31] getNonEmptyBucketCount
  [24] applyNormalMove        [30] endSearch               [8] getPawnMoves
  [42] applyPromotionMove      [3] evaluateBoard          [17] getQueenMoves
  [43] buildKnightMap         [18] evaluateMaterial       [16] getRookMoves
  [39] copyBoard               [4] evaluateMoves          [10] hueristicSort
  [44] createBoard            [20] evaluatePosition        [9] pruneCheckValidations
  [28] createBucket           [27] fillDirection          [40] revertEnpassMove
  [32] createCastleMove        [5] getAllMoves            [23] revertNormalMove
  [34] createEnpassMove       [21] getBestMoveIndex       [41] revertPromotionMove
  [25] createHash             [11] getBishopMoves         [26] storeNode
  [13] createKey              [12] getKingMoves            [6] validateMove
  [33] createNode             [14] getKnightMoves         [19] valueSort
