2533866

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 16.63      4.18     4.18 19872316     0.00     0.00  validateMove
 13.49      7.58     3.40  4933416     0.00     0.00  evaluateMoves
  9.06      9.86     2.28  5090287     0.00     0.00  getAllMoves
  8.10     11.90     2.04  2691671     0.00     0.00  createKey
  6.00     13.41     1.51  2655343     0.00     0.00  getNode
  5.28     14.74     1.33 39546796     0.00     0.00  getPawnMoves
  4.77     15.94     1.20 14807879     0.00     0.00  getBishopMoves
  4.65     17.11     1.17  2510036     0.00     0.00  evaluateMaterial
  4.55     18.25     1.15  5389545     0.00     0.00  pruneCheckValidations
  4.19     19.31     1.05 10148716     0.00     0.00  evaluatePosition
  3.97     20.31     1.00 14988564     0.00     0.00  getRookMoves
  3.89     21.29     0.98   231628     0.00     0.00  valueSort
  3.10     22.07     0.78 154327194     0.00     0.00  createNormalMove
  3.10     22.85     0.78  9809806     0.00     0.00  getKnightMoves
  2.40     23.45     0.60  4803904     0.00     0.00  getKingMoves
  1.59     23.86     0.40 20116045     0.00     0.00  revertNormalMove
  1.31     24.18     0.33  2939488     0.00     0.00  createHash
  1.07     24.45     0.27 19242714     0.00     0.00  applyNormalMove
  0.99     24.70     0.25     3274     0.08     7.65  alphaBetaPrune
  0.36     24.80     0.09   244901     0.00     0.01  hueristicSort
  0.34     24.88     0.09   278360     0.00     0.00  fillDirection
  0.26     24.95     0.07                             createCastleMove
  0.24     25.00     0.06  1738654     0.00     0.00  storeNode
  0.22     25.06     0.06  4862883     0.00     0.00  getQueenMoves
  0.12     25.09     0.03  1790159     0.00     0.00  createNode
  0.08     25.11     0.02  2097152     0.00     0.00  createBucket
  0.08     25.13     0.02        1    20.00    40.00  createTTable
  0.04     25.14     0.01  2565146     0.00     0.01  evaluateBoard
  0.04     25.15     0.01  1888311     0.00     0.00  getNodeType
  0.04     25.16     0.01        1    10.00    10.00  getNonEmptyBucketCount
  0.04     25.17     0.01                             revertCastleMove
  0.00     25.17     0.00     3597     0.00     0.00  createEnpassMove
  0.00     25.17     0.00     1084     0.00     0.00  copyBoard
  0.00     25.17     0.00      521     0.00     0.00  revertEnpassMove
  0.00     25.17     0.00      505     0.00     0.00  applyEnpassMove
  0.00     25.17     0.00      324     0.00     0.00  createPromotionMove
  0.00     25.17     0.00        7     0.00     0.00  revertPromotionMove
  0.00     25.17     0.00        6     0.00     0.00  applyPromotionMove
  0.00     25.17     0.00        1     0.00     0.00  buildKnightMap
  0.00     25.17     0.00        1     0.00     0.00  createBoard
  0.00     25.17     0.00        1     0.00    10.00  endSearch
  0.00     25.17     0.00        1     0.00   516.65  getBestMoveIndex

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.04% of 25.17 seconds

index % time    self  children    called     name
                             2758515             alphaBetaPrune [1]
                0.00    0.46      61/3274        getBestMoveIndex [21]
                0.25   24.33    3213/3274        spawnAlphaBetaPruneThread [2]
[1]     99.5    0.25   24.79    3274+2758515 alphaBetaPrune [1]
                0.01   17.92 2565146/2565146     evaluateBoard [3]
                0.09    2.02  244901/244901      hueristicSort [10]
                2.04    0.00 2691671/2691671     createKey [11]
                1.51    0.00 2655343/2655343     getNode [14]
                0.11    0.57  252573/5090287     getAllMoves [5]
                0.33    0.00 2939488/2939488     createHash [24]
                0.06    0.00 1738654/1738654     storeNode [28]
                0.06    0.00 2928752/20116045     revertNormalMove [23]
                0.04    0.00 2752767/19242714     applyNormalMove [25]
                0.03    0.00 1790159/1790159     createNode [30]
                0.01    0.00 1888311/1888311     getNodeType [32]
                0.00    0.00       5/19872316     validateMove [6]
                0.00    0.00    1084/1084        copyBoard [38]
                0.00    0.00     127/521         revertEnpassMove [39]
                0.00    0.00     116/505         applyEnpassMove [40]
                             2758515             alphaBetaPrune [1]
-----------------------------------------------
                                                 <spontaneous>
[2]     97.6    0.00   24.58                 spawnAlphaBetaPruneThread [2]
                0.25   24.33    3213/3274        alphaBetaPrune [1]
-----------------------------------------------
                0.01   17.92 2565146/2565146     alphaBetaPrune [1]
[3]     71.2    0.01   17.92 2565146         evaluateBoard [3]
                3.40   13.08 4933416/4933416     evaluateMoves [4]
                1.17    0.00 2510036/2510036     evaluateMaterial [17]
                0.27    0.00 2570556/10148716     evaluatePosition [19]
-----------------------------------------------
                3.40   13.08 4933416/4933416     evaluateBoard [3]
[4]     65.5    3.40   13.08 4933416         evaluateMoves [4]
                2.17   10.92 4837712/5090287     getAllMoves [5]
-----------------------------------------------
                0.00    0.00       2/5090287     getBestMoveIndex [21]
                0.11    0.57  252573/5090287     alphaBetaPrune [1]
                2.17   10.92 4837712/5090287     evaluateMoves [4]
[5]     54.7    2.28   11.49 5090287         getAllMoves [5]
                1.33    1.22 39546796/39546796     getPawnMoves [8]
                1.15    1.22 5389545/5389545     pruneCheckValidations [9]
                0.60    1.18 4803904/4803904     getKingMoves [13]
                0.78    0.70 9809806/9809806     getKnightMoves [15]
                0.81    0.48 9944263/14807879     getBishopMoves [12]
                0.06    1.07 4862883/4862883     getQueenMoves [18]
                0.67    0.22 10062739/14988564     getRookMoves [16]
-----------------------------------------------
                0.00    0.00       5/19872316     alphaBetaPrune [1]
                0.00    0.00       8/19872316     createPromotionMove [36]
                1.05    0.00 4972189/19872316     getKingMoves [13]
                1.14    0.00 5412054/19872316     pruneCheckValidations [9]
                2.00    0.00 9488060/19872316     createNormalMove [7]
[6]     16.6    4.18    0.00 19872316         validateMove [6]
-----------------------------------------------
                0.03    0.10 6427588/154327194     getKingMoves [13]
                0.08    0.25 16355372/154327194     getRookMoves [16]
                0.18    0.52 34745472/154327194     getKnightMoves [15]
                0.18    0.54 35864132/154327194     getBishopMoves [12]
                0.31    0.92 60934630/154327194     getPawnMoves [8]
[7]     12.3    0.78    2.32 154327194         createNormalMove [7]
                2.00    0.00 9488060/19872316     validateMove [6]
                0.19    0.00 9607921/20116045     revertNormalMove [23]
                0.13    0.00 9282430/19242714     applyNormalMove [25]
-----------------------------------------------
                1.33    1.22 39546796/39546796     getAllMoves [5]
[8]     10.1    1.33    1.22 39546796         getPawnMoves [8]
                0.31    0.92 60934630/154327194     createNormalMove [7]
                0.00    0.00     324/324         createPromotionMove [36]
                0.00    0.00    3597/3597        createEnpassMove [37]
-----------------------------------------------
                1.15    1.22 5389545/5389545     getAllMoves [5]
[9]      9.4    1.15    1.22 5389545         pruneCheckValidations [9]
                1.14    0.00 5412054/19872316     validateMove [6]
                0.09    0.00  278360/278360      fillDirection [26]
-----------------------------------------------
                0.09    2.02  244901/244901      alphaBetaPrune [1]
[10]     8.4    0.09    2.02  244901         hueristicSort [10]
                0.98    0.00  231625/231628      valueSort [20]
                0.79    0.00 7578160/10148716     evaluatePosition [19]
                0.15    0.00 7579372/20116045     revertNormalMove [23]
                0.10    0.00 7207517/19242714     applyNormalMove [25]
                0.00    0.00     394/521         revertEnpassMove [39]
                0.00    0.00     389/505         applyEnpassMove [40]
-----------------------------------------------
                2.04    0.00 2691671/2691671     alphaBetaPrune [1]
[11]     8.1    2.04    0.00 2691671         createKey [11]
-----------------------------------------------
                0.39    0.24 4863616/14807879     getQueenMoves [18]
                0.81    0.48 9944263/14807879     getAllMoves [5]
[12]     7.6    1.20    0.72 14807879         getBishopMoves [12]
                0.18    0.54 35864132/154327194     createNormalMove [7]
-----------------------------------------------
                0.60    1.18 4803904/4803904     getAllMoves [5]
[13]     7.1    0.60    1.18 4803904         getKingMoves [13]
                1.05    0.00 4972189/19872316     validateMove [6]
                0.03    0.10 6427588/154327194     createNormalMove [7]
-----------------------------------------------
                1.51    0.00 2655343/2655343     alphaBetaPrune [1]
[14]     6.0    1.51    0.00 2655343         getNode [14]
-----------------------------------------------
                0.78    0.70 9809806/9809806     getAllMoves [5]
[15]     5.9    0.78    0.70 9809806         getKnightMoves [15]
                0.18    0.52 34745472/154327194     createNormalMove [7]
-----------------------------------------------
                0.33    0.11 4925825/14988564     getQueenMoves [18]
                0.67    0.22 10062739/14988564     getAllMoves [5]
[16]     5.3    1.00    0.33 14988564         getRookMoves [16]
                0.08    0.25 16355372/154327194     createNormalMove [7]
-----------------------------------------------
                1.17    0.00 2510036/2510036     evaluateBoard [3]
[17]     4.6    1.17    0.00 2510036         evaluateMaterial [17]
-----------------------------------------------
                0.06    1.07 4862883/4862883     getAllMoves [5]
[18]     4.5    0.06    1.07 4862883         getQueenMoves [18]
                0.39    0.24 4863616/14807879     getBishopMoves [12]
                0.33    0.11 4925825/14988564     getRookMoves [16]
-----------------------------------------------
                0.27    0.00 2570556/10148716     evaluateBoard [3]
                0.79    0.00 7578160/10148716     hueristicSort [10]
[19]     4.2    1.05    0.00 10148716         evaluatePosition [19]
-----------------------------------------------
                0.00    0.00       3/231628      getBestMoveIndex [21]
                0.98    0.00  231625/231628      hueristicSort [10]
[20]     3.9    0.98    0.00  231628         valueSort [20]
-----------------------------------------------
                0.00    0.52       1/1           main [22]
[21]     2.1    0.00    0.52       1         getBestMoveIndex [21]
                0.00    0.46      61/3274        alphaBetaPrune [1]
                0.02    0.02       1/1           createTTable [29]
                0.00    0.01       1/1           endSearch [33]
                0.00    0.00       3/231628      valueSort [20]
                0.00    0.00       2/5090287     getAllMoves [5]
-----------------------------------------------
                                                 <spontaneous>
[22]     2.1    0.00    0.52                 main [22]
                0.00    0.52       1/1           getBestMoveIndex [21]
                0.00    0.00       1/1           createBoard [44]
-----------------------------------------------
                0.06    0.00 2928752/20116045     alphaBetaPrune [1]
                0.15    0.00 7579372/20116045     hueristicSort [10]
                0.19    0.00 9607921/20116045     createNormalMove [7]
[23]     1.6    0.40    0.00 20116045         revertNormalMove [23]
-----------------------------------------------
                0.33    0.00 2939488/2939488     alphaBetaPrune [1]
[24]     1.3    0.33    0.00 2939488         createHash [24]
-----------------------------------------------
                0.04    0.00 2752767/19242714     alphaBetaPrune [1]
                0.10    0.00 7207517/19242714     hueristicSort [10]
                0.13    0.00 9282430/19242714     createNormalMove [7]
[25]     1.1    0.27    0.00 19242714         applyNormalMove [25]
-----------------------------------------------
                0.09    0.00  278360/278360      pruneCheckValidations [9]
[26]     0.3    0.09    0.00  278360         fillDirection [26]
-----------------------------------------------
                                                 <spontaneous>
[27]     0.3    0.07    0.00                 createCastleMove [27]
-----------------------------------------------
                0.06    0.00 1738654/1738654     alphaBetaPrune [1]
[28]     0.2    0.06    0.00 1738654         storeNode [28]
-----------------------------------------------
                0.02    0.02       1/1           getBestMoveIndex [21]
[29]     0.2    0.02    0.02       1         createTTable [29]
                0.02    0.00 2097152/2097152     createBucket [31]
-----------------------------------------------
                0.03    0.00 1790159/1790159     alphaBetaPrune [1]
[30]     0.1    0.03    0.00 1790159         createNode [30]
-----------------------------------------------
                0.02    0.00 2097152/2097152     createTTable [29]
[31]     0.1    0.02    0.00 2097152         createBucket [31]
-----------------------------------------------
                0.01    0.00 1888311/1888311     alphaBetaPrune [1]
[32]     0.0    0.01    0.00 1888311         getNodeType [32]
-----------------------------------------------
                0.00    0.01       1/1           getBestMoveIndex [21]
[33]     0.0    0.00    0.01       1         endSearch [33]
                0.01    0.00       1/1           getNonEmptyBucketCount [34]
-----------------------------------------------
                0.01    0.00       1/1           endSearch [33]
[34]     0.0    0.01    0.00       1         getNonEmptyBucketCount [34]
-----------------------------------------------
                                                 <spontaneous>
[35]     0.0    0.01    0.00                 revertCastleMove [35]
-----------------------------------------------
                0.00    0.00     324/324         getPawnMoves [8]
[36]     0.0    0.00    0.00     324         createPromotionMove [36]
                0.00    0.00       8/19872316     validateMove [6]
                0.00    0.00       7/7           revertPromotionMove [41]
                0.00    0.00       6/6           applyPromotionMove [42]
-----------------------------------------------
                0.00    0.00    3597/3597        getPawnMoves [8]
[37]     0.0    0.00    0.00    3597         createEnpassMove [37]
-----------------------------------------------
                0.00    0.00    1084/1084        alphaBetaPrune [1]
[38]     0.0    0.00    0.00    1084         copyBoard [38]
-----------------------------------------------
                0.00    0.00     127/521         alphaBetaPrune [1]
                0.00    0.00     394/521         hueristicSort [10]
[39]     0.0    0.00    0.00     521         revertEnpassMove [39]
-----------------------------------------------
                0.00    0.00     116/505         alphaBetaPrune [1]
                0.00    0.00     389/505         hueristicSort [10]
[40]     0.0    0.00    0.00     505         applyEnpassMove [40]
-----------------------------------------------
                0.00    0.00       7/7           createPromotionMove [36]
[41]     0.0    0.00    0.00       7         revertPromotionMove [41]
-----------------------------------------------
                0.00    0.00       6/6           createPromotionMove [36]
[42]     0.0    0.00    0.00       6         applyPromotionMove [42]
-----------------------------------------------
                0.00    0.00       1/1           createBoard [44]
[43]     0.0    0.00    0.00       1         buildKnightMap [43]
-----------------------------------------------
                0.00    0.00       1/1           main [22]
[44]     0.0    0.00    0.00       1         createBoard [44]
                0.00    0.00       1/1           buildKnightMap [43]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [1] alphaBetaPrune         [36] createPromotionMove    [32] getNodeType
  [40] applyEnpassMove        [29] createTTable           [34] getNonEmptyBucketCount
  [25] applyNormalMove        [33] endSearch               [8] getPawnMoves
  [42] applyPromotionMove      [3] evaluateBoard          [18] getQueenMoves
  [43] buildKnightMap         [17] evaluateMaterial       [16] getRookMoves
  [38] copyBoard               [4] evaluateMoves          [10] hueristicSort
  [44] createBoard            [19] evaluatePosition        [9] pruneCheckValidations
  [31] createBucket           [26] fillDirection          [35] revertCastleMove
  [27] createCastleMove        [5] getAllMoves            [39] revertEnpassMove
  [37] createEnpassMove       [21] getBestMoveIndex       [23] revertNormalMove
  [24] createHash             [12] getBishopMoves         [41] revertPromotionMove
  [11] createKey              [13] getKingMoves           [28] storeNode
  [30] createNode             [15] getKnightMoves          [6] validateMove
   [7] createNormalMove       [14] getNode                [20] valueSort
